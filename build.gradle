plugins {
    id "org.sonarqube" version "6.3.1.5724"
}

if ( !hasProperty('buildNumber') ) {
    rootProject.ext.buildNumber = 'SNAPSHOT'
}
version = "V2.1." + "${rootProject.ext.buildNumber}"

ext {
    jUnitVersion = '4.13.2'
    springFrameworkVersion = '5.2.24.RELEASE'
    springSecurityVersion = '5.8.3'
    mockitoCoreVersion = '3.3.3'
    orgSfl4jVersion = '1.7.36'
    jettyVersion = '9.4.52.v20230823'
//    jettyVersion = '12.0.1'
    javaxAnnotationApi='javax.annotation:javax.annotation-api:1.3.2'
    orgJsonApi='org.json:json:20230227'
}

sonarqube {
    properties {
        property "sonar.projectKey", "tkohegyi_common"
        property "sonar.organization", "tkohegyi"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
        property "sonar.exclusions", "**/external/**/*";
    }
}

subprojects {
    group = 'website.magyar.adorapp'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'java'
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.7"
    }
    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
    test.finalizedBy jacocoTestReport

    // Source and target info
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
    }

    // checkstyle settings
    // general checkstyle availability:  https://checkstyle.sourceforge.io/releasenotes.html
    // compatibility with sonar https://docs.sonarqube.org/latest/instance-administration/plugin-version-matrix/
    checkstyle.toolVersion = '8.40'
    checkstyle.ignoreFailures = true
    checkstyle.configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    checkstyle.configProperties = ['samedir' : "${rootDir}/config/checkstyle"]
    tasks.withType(Checkstyle) {
        reports {
            xml.required = false
            html.required = true
            html.stylesheet resources.text.fromFile("${rootDir}/config/checkstyle/checkstyle-noframes-sorted.xsl")
        }
    }

    subprojects {
        task allDeps(type: DependencyReportTask) {}
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
